; 把 P1.0 到 P1.3 设为按钮
KEY1 BIT P1.0
KEY2 BIT P1.1
KEY3 BIT P1.2
KEY4 BIT P1.3

; 把 P3.0 到 P3.5 设为LED灯
LED1 BIT P3.0
LED2 BIT P3.1
LED3 BIT P3.2
LED4 BIT P3.3
LED5 BIT P3.4
LED6 BIT P3.5

; 把 P2.0 到 P2.3 设为输入线
IN1_A BIT P2.0
IN2_B BIT P2.1
IN3_C BIT P2.2
IN4_D BIT P2.3

; 延迟、步数、速度和计数器的内存位置
DLY  EQU 30H
STEP EQU 31H
SPEED EQU 32H
CNT  EQU 33H
KEY  EQU 34H
DIR  BIT 00H

ORG 0000H
 LJMP MAIN ; 初始跳转到主程序
 ORG 000BH
 LJMP T0ISR ; 定时器0中断处理
 ORG 0030H
;从这里开始是主程序。它首先初始化定时器0，然后进入一个循环，在循环中扫描按键，处理按键输入，并显示LED灯。
MAIN:
 LCALL time0_init
 MOV SPEED,#3
;在这段代码中，当检测到不同的按键被按下时，会做出相应的动作。
LOOP:
 LCALL key_scan    ;扫描键盘
 CJNE A,#1,LOOP1   ;如果A的值不等于1，跳转到LOOP1，否则继续下面的指令
 SETB DIR          ;如果A等于1，设定DIR位
 SJMP LOOP4        ;无条件跳转到LOOP4
LOOP1:
 CJNE A,#2,LOOP2   ;如果A的值不等于2，跳转到LOOP2，否则继续下面的指令
 CLR DIR           ;如果A等于2，清除DIR位
 SJMP LOOP4        ;无条件跳转到LOOP4
LOOP2:
 CJNE A,#3,LOOP3   ;如果A的值不等于3，跳转到LOOP3，否则继续下面的指令
 MOV A,SPEED       ;如果A等于3，将SPEED的值加载到寄存器A
 ADD A,#16         ;给寄存器A加上16
 CJNE A,#200,LOOP21;如果A的值不等于200，跳转到LOOP21，否则继续下面的指令
LOOP21:
 JC LOOP22         ;如果前面的ADD指令造成了进位，跳转到LOOP22
 MOV A,#200        ;如果A等于200，将200加载到寄存器A
LOOP22:
 MOV SPEED,A       ;更新SPEED的值
 SJMP LOOP4        ;无条件跳转到LOOP4
LOOP3:
 CJNE A,#4,LOOP4   ;如果A的值不等于4，跳转到LOOP4，否则继续下面的指令
 MOV A,SPEED       ;如果A等于4，将SPEED的值加载到寄存器A
 CLR C             ;清除进位标志
 SUBB A,#16        ;从寄存器A的值中减去16
 JNB ACC.7,LOOP31  ;如果ACC.7位（也就是A的最高位）没有被置位，跳转到LOOP31
 MOV A,#0          ;如果ACC.7位被置位，将0加载到寄存器A
LOOP31:
 MOV SPEED,A       ;更新SPEED的值
LOOP4:
 LCALL show        ;显示函数，可能是在LED上显示一些信息
 LJMP LOOP         ;无条件跳转回LOOP，重复整个循环
;这是定时器0的中断服务例程，其中包括一些与步进电机控制相关的处理。
T0ISR:   
 PUSH ACC
 PUSH B
 PUSH PSW
 PUSH DPL
 PUSH DPH
 CLR TR0
 MOV TH0,#0FCH
 MOV TL0,#18H
 SETB TR0
 MOV A,SPEED
 JZ T0CNT
 JB DIR,MOTZ
MOTF:
 LCALL send_pulse_f
 SJMP T0CNT
MOTZ:
 LCALL send_pulse_z
T0CNT:
 INC CNT
 MOV A,#240
 CLR C
 SUBB A,SPEED
 MOV B,A
 MOV A,CNT
 CJNE A,B,T01
 SJMP T0E
T01:
 JC T0E
 MOV CNT,#0
 INC STEP
 MOV A,STEP
 MOV B,#8
 DIV AB
 MOV STEP,B
T0E:
 POP DPH
 POP DPL
 POP PSW
 POP B
 POP ACC
 RETI
;该部分初始化定时器0：
time0_init:  
 MOV TMOD,#01H
 MOV TH0,#0FCH
 MOV TL0,#18H
 SETB ET0
 SETB EA
 SETB TR0
 RET
;这部分是显示函数，它读取速度值并更新LED灯的状态。
show: 
这两个函数（send_pulse_f和send_pulse_z）看起来像是发送脉冲信号来控制步进电机的函数
send_pulse_f:   
 ...
 RET
send_pulse_z:  
 ...
 RET

; 这部分代码根据A的值设置不同的输入信号，其值可能为0-7，每个值对应一个特定的输入信号组合。
; 这个组合可以被解释为一个在逆向旋转的电机状态序列。
; 逆转顺序，针对不同的A值，设置不同的输入信号
CJNE A,#7,SEND_PF1 ;如果A不等于7，跳转到SEND_PF1
SETB IN1_A  ; A
CLR  IN2_B
CLR  IN3_C
CLR  IN4_D
RET

SEND_PF1:  ; AB
CJNE A,#6,SEND_PF2
SETB IN1_A
SETB IN2_B
CLR  IN3_C
CLR  IN4_D
RET

SEND_PF2:  ; B
CJNE A,#5,SEND_PF3
CLR  IN1_A
SETB IN2_B
CLR  IN3_C
CLR  IN4_D
RET

SEND_PF3:  ; BC
CJNE A,#4,SEND_PF4
CLR  IN1_A
SETB IN2_B
SETB IN3_C
CLR  IN4_D
RET

SEND_PF4:  ; C
CJNE A,#3,SEND_PF5
CLR  IN1_A
CLR  IN2_B
SETB IN3_C
CLR  IN4_D
RET

SEND_PF5:  ; CD
CJNE A,#2,SEND_PF6
CLR  IN1_A
CLR  IN2_B
SETB IN3_C
SETB IN4_D
RET

SEND_PF6:  ; D
CJNE A,#1,SEND_PF7
CLR  IN1_A
CLR  IN2_B
CLR  IN3_C
SETB IN4_D
RET

SEND_PF7:  ; DA
CJNE A,#0,SEND_PF8
SETB IN1_A
CLR  IN2_B
CLR  IN3_C
SETB IN4_D
RET

SEND_PF8:  ; 停止序列
CLR  IN1_A
CLR  IN2_B
CLR  IN3_C
CLR  IN4_D
RET

; 正转顺序，根据A的值设置不同的输入信号
CJNE A,#2,SEND_P3
CLR  IN1_A
SETB IN2_B
CLR  IN3_C
CLR  IN4_D
RET

SEND_P3:  ; BC
CJNE A,#3,SEND_P4
CLR  IN1_A
SETB IN2_B
SETB IN3_C
CLR  IN4_D
RET

SEND_P4:  ; C
CJNE A,#4,SEND_P5
CLR  IN1_A
CLR  IN2_B
SETB IN3_C
CLR  IN4_D
RET

SEND_P5:  ; CD
CJNE A,#5,SEND_P6
CLR  IN1_A
CLR  IN2_B
SETB IN3_C
SETB IN4_D
RET

SEND_P6:  ; D
CJNE A,#6,SEND_P7
CLR  IN1_A
CLR  IN2_B
CLR  IN3_C
SETB IN4_D
RET

SEND_P7:  ; DA
CJNE A,#7,SEND_P8
SETB IN1_A
CLR  IN2_B
CLR  IN3_C
SETB IN4_D
RET

SEND_P8:  ; 停止序列
CLR  IN1_A
CLR  IN2_B
CLR  IN3_C
CLR  IN4_D
RET

; 延时函数
DELAYMS:
MOV R2,#249
DJNZ R2,$  ; 延时249个机器周期
MOV R2,#249
DJNZ R2,$  ; 延时249个机器周期
DJNZ DLY,DELAYMS  ; 如果DLY不为零，继续延时
RET

; 显示表格，提供对应的显示编码
TABLE:
DB 3FH,06H,5BH,4FH,66H,6DH,7DH,07H
DB 7FH,6FH,77H,7CH,39H,5EH,79H,71H,00H
END
；这个代码主要包含了两部分：逆转顺序和正转顺序的信号控制，每个部分根据寄存器A的值决定输出的信号组合。后面还包含一个延时函数以及一些显示编码的表格。
